// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: LevelData.proto
#ifndef GRPC_LevelData_2eproto__INCLUDED
#define GRPC_LevelData_2eproto__INCLUDED

#include "LevelData.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

class SceneDataService final {
 public:
  static constexpr char const* service_full_name() {
    return "SceneDataService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetLevelData(::grpc::ClientContext* context, const ::LevelRequest& request, ::LevelData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LevelData>> AsyncGetLevelData(::grpc::ClientContext* context, const ::LevelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LevelData>>(AsyncGetLevelDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LevelData>> PrepareAsyncGetLevelData(::grpc::ClientContext* context, const ::LevelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LevelData>>(PrepareAsyncGetLevelDataRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::MeshDataChunk* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MeshDataChunk>> AsyncGetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MeshDataChunk>>(AsyncGetMeshDataChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MeshDataChunk>> PrepareAsyncGetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MeshDataChunk>>(PrepareAsyncGetMeshDataChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::TextureDataChunk* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TextureDataChunk>> AsyncGetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TextureDataChunk>>(AsyncGetTextureDataChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TextureDataChunk>> PrepareAsyncGetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TextureDataChunk>>(PrepareAsyncGetTextureDataChunkRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetLevelData(::grpc::ClientContext* context, const ::LevelRequest* request, ::LevelData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLevelData(::grpc::ClientContext* context, const ::LevelRequest* request, ::LevelData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest* request, ::MeshDataChunk* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest* request, ::MeshDataChunk* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest* request, ::TextureDataChunk* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest* request, ::TextureDataChunk* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LevelData>* AsyncGetLevelDataRaw(::grpc::ClientContext* context, const ::LevelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LevelData>* PrepareAsyncGetLevelDataRaw(::grpc::ClientContext* context, const ::LevelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MeshDataChunk>* AsyncGetMeshDataChunkRaw(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MeshDataChunk>* PrepareAsyncGetMeshDataChunkRaw(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TextureDataChunk>* AsyncGetTextureDataChunkRaw(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TextureDataChunk>* PrepareAsyncGetTextureDataChunkRaw(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetLevelData(::grpc::ClientContext* context, const ::LevelRequest& request, ::LevelData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LevelData>> AsyncGetLevelData(::grpc::ClientContext* context, const ::LevelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LevelData>>(AsyncGetLevelDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LevelData>> PrepareAsyncGetLevelData(::grpc::ClientContext* context, const ::LevelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LevelData>>(PrepareAsyncGetLevelDataRaw(context, request, cq));
    }
    ::grpc::Status GetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::MeshDataChunk* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MeshDataChunk>> AsyncGetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MeshDataChunk>>(AsyncGetMeshDataChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MeshDataChunk>> PrepareAsyncGetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MeshDataChunk>>(PrepareAsyncGetMeshDataChunkRaw(context, request, cq));
    }
    ::grpc::Status GetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::TextureDataChunk* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TextureDataChunk>> AsyncGetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TextureDataChunk>>(AsyncGetTextureDataChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TextureDataChunk>> PrepareAsyncGetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TextureDataChunk>>(PrepareAsyncGetTextureDataChunkRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetLevelData(::grpc::ClientContext* context, const ::LevelRequest* request, ::LevelData* response, std::function<void(::grpc::Status)>) override;
      void GetLevelData(::grpc::ClientContext* context, const ::LevelRequest* request, ::LevelData* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest* request, ::MeshDataChunk* response, std::function<void(::grpc::Status)>) override;
      void GetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest* request, ::MeshDataChunk* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest* request, ::TextureDataChunk* response, std::function<void(::grpc::Status)>) override;
      void GetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest* request, ::TextureDataChunk* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::LevelData>* AsyncGetLevelDataRaw(::grpc::ClientContext* context, const ::LevelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LevelData>* PrepareAsyncGetLevelDataRaw(::grpc::ClientContext* context, const ::LevelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MeshDataChunk>* AsyncGetMeshDataChunkRaw(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MeshDataChunk>* PrepareAsyncGetMeshDataChunkRaw(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TextureDataChunk>* AsyncGetTextureDataChunkRaw(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TextureDataChunk>* PrepareAsyncGetTextureDataChunkRaw(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetLevelData_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMeshDataChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTextureDataChunk_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetLevelData(::grpc::ServerContext* context, const ::LevelRequest* request, ::LevelData* response);
    virtual ::grpc::Status GetMeshDataChunk(::grpc::ServerContext* context, const ::MeshChunkRequest* request, ::MeshDataChunk* response);
    virtual ::grpc::Status GetTextureDataChunk(::grpc::ServerContext* context, const ::TextureChunkRequest* request, ::TextureDataChunk* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLevelData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLevelData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetLevelData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLevelData(::grpc::ServerContext* /*context*/, const ::LevelRequest* /*request*/, ::LevelData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLevelData(::grpc::ServerContext* context, ::LevelRequest* request, ::grpc::ServerAsyncResponseWriter< ::LevelData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMeshDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMeshDataChunk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMeshDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeshDataChunk(::grpc::ServerContext* /*context*/, const ::MeshChunkRequest* /*request*/, ::MeshDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMeshDataChunk(::grpc::ServerContext* context, ::MeshChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::MeshDataChunk>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTextureDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTextureDataChunk() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTextureDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTextureDataChunk(::grpc::ServerContext* /*context*/, const ::TextureChunkRequest* /*request*/, ::TextureDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTextureDataChunk(::grpc::ServerContext* context, ::TextureChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::TextureDataChunk>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetLevelData<WithAsyncMethod_GetMeshDataChunk<WithAsyncMethod_GetTextureDataChunk<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetLevelData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLevelData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::LevelRequest, ::LevelData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::LevelRequest* request, ::LevelData* response) { return this->GetLevelData(context, request, response); }));}
    void SetMessageAllocatorFor_GetLevelData(
        ::grpc::MessageAllocator< ::LevelRequest, ::LevelData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LevelRequest, ::LevelData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLevelData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLevelData(::grpc::ServerContext* /*context*/, const ::LevelRequest* /*request*/, ::LevelData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLevelData(
      ::grpc::CallbackServerContext* /*context*/, const ::LevelRequest* /*request*/, ::LevelData* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMeshDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMeshDataChunk() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MeshChunkRequest, ::MeshDataChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MeshChunkRequest* request, ::MeshDataChunk* response) { return this->GetMeshDataChunk(context, request, response); }));}
    void SetMessageAllocatorFor_GetMeshDataChunk(
        ::grpc::MessageAllocator< ::MeshChunkRequest, ::MeshDataChunk>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MeshChunkRequest, ::MeshDataChunk>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMeshDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeshDataChunk(::grpc::ServerContext* /*context*/, const ::MeshChunkRequest* /*request*/, ::MeshDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMeshDataChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::MeshChunkRequest* /*request*/, ::MeshDataChunk* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTextureDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTextureDataChunk() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::TextureChunkRequest, ::TextureDataChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TextureChunkRequest* request, ::TextureDataChunk* response) { return this->GetTextureDataChunk(context, request, response); }));}
    void SetMessageAllocatorFor_GetTextureDataChunk(
        ::grpc::MessageAllocator< ::TextureChunkRequest, ::TextureDataChunk>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TextureChunkRequest, ::TextureDataChunk>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTextureDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTextureDataChunk(::grpc::ServerContext* /*context*/, const ::TextureChunkRequest* /*request*/, ::TextureDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTextureDataChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::TextureChunkRequest* /*request*/, ::TextureDataChunk* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetLevelData<WithCallbackMethod_GetMeshDataChunk<WithCallbackMethod_GetTextureDataChunk<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetLevelData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLevelData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetLevelData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLevelData(::grpc::ServerContext* /*context*/, const ::LevelRequest* /*request*/, ::LevelData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMeshDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMeshDataChunk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMeshDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeshDataChunk(::grpc::ServerContext* /*context*/, const ::MeshChunkRequest* /*request*/, ::MeshDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTextureDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTextureDataChunk() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTextureDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTextureDataChunk(::grpc::ServerContext* /*context*/, const ::TextureChunkRequest* /*request*/, ::TextureDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLevelData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLevelData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetLevelData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLevelData(::grpc::ServerContext* /*context*/, const ::LevelRequest* /*request*/, ::LevelData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLevelData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMeshDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMeshDataChunk() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMeshDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeshDataChunk(::grpc::ServerContext* /*context*/, const ::MeshChunkRequest* /*request*/, ::MeshDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMeshDataChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTextureDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTextureDataChunk() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTextureDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTextureDataChunk(::grpc::ServerContext* /*context*/, const ::TextureChunkRequest* /*request*/, ::TextureDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTextureDataChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLevelData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLevelData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLevelData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLevelData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLevelData(::grpc::ServerContext* /*context*/, const ::LevelRequest* /*request*/, ::LevelData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLevelData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMeshDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMeshDataChunk() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMeshDataChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMeshDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeshDataChunk(::grpc::ServerContext* /*context*/, const ::MeshChunkRequest* /*request*/, ::MeshDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMeshDataChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTextureDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTextureDataChunk() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTextureDataChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTextureDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTextureDataChunk(::grpc::ServerContext* /*context*/, const ::TextureChunkRequest* /*request*/, ::TextureDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTextureDataChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLevelData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLevelData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LevelRequest, ::LevelData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LevelRequest, ::LevelData>* streamer) {
                       return this->StreamedGetLevelData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLevelData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLevelData(::grpc::ServerContext* /*context*/, const ::LevelRequest* /*request*/, ::LevelData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLevelData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LevelRequest,::LevelData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMeshDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMeshDataChunk() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MeshChunkRequest, ::MeshDataChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MeshChunkRequest, ::MeshDataChunk>* streamer) {
                       return this->StreamedGetMeshDataChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMeshDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMeshDataChunk(::grpc::ServerContext* /*context*/, const ::MeshChunkRequest* /*request*/, ::MeshDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMeshDataChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MeshChunkRequest,::MeshDataChunk>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTextureDataChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTextureDataChunk() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TextureChunkRequest, ::TextureDataChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TextureChunkRequest, ::TextureDataChunk>* streamer) {
                       return this->StreamedGetTextureDataChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTextureDataChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTextureDataChunk(::grpc::ServerContext* /*context*/, const ::TextureChunkRequest* /*request*/, ::TextureDataChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTextureDataChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TextureChunkRequest,::TextureDataChunk>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetLevelData<WithStreamedUnaryMethod_GetMeshDataChunk<WithStreamedUnaryMethod_GetTextureDataChunk<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetLevelData<WithStreamedUnaryMethod_GetMeshDataChunk<WithStreamedUnaryMethod_GetTextureDataChunk<Service > > > StreamedService;
};


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_LevelData_2eproto__INCLUDED
