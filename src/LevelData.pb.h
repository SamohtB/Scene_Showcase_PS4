// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: LevelData.proto
// Protobuf C++ Version: 5.29.3

#ifndef LevelData_2eproto_2epb_2eh
#define LevelData_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_LevelData_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_LevelData_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_LevelData_2eproto;
class LevelData;
struct LevelDataDefaultTypeInternal;
extern LevelDataDefaultTypeInternal _LevelData_default_instance_;
class LevelRequest;
struct LevelRequestDefaultTypeInternal;
extern LevelRequestDefaultTypeInternal _LevelRequest_default_instance_;
class MeshChunkRequest;
struct MeshChunkRequestDefaultTypeInternal;
extern MeshChunkRequestDefaultTypeInternal _MeshChunkRequest_default_instance_;
class MeshDataChunk;
struct MeshDataChunkDefaultTypeInternal;
extern MeshDataChunkDefaultTypeInternal _MeshDataChunk_default_instance_;
class ObjectData;
struct ObjectDataDefaultTypeInternal;
extern ObjectDataDefaultTypeInternal _ObjectData_default_instance_;
class TextureChunkRequest;
struct TextureChunkRequestDefaultTypeInternal;
extern TextureChunkRequestDefaultTypeInternal _TextureChunkRequest_default_instance_;
class TextureDataChunk;
struct TextureDataChunkDefaultTypeInternal;
extern TextureDataChunkDefaultTypeInternal _TextureDataChunk_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class TextureDataChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TextureDataChunk) */ {
 public:
  inline TextureDataChunk() : TextureDataChunk(nullptr) {}
  ~TextureDataChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TextureDataChunk* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TextureDataChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TextureDataChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline TextureDataChunk(const TextureDataChunk& from) : TextureDataChunk(nullptr, from) {}
  inline TextureDataChunk(TextureDataChunk&& from) noexcept
      : TextureDataChunk(nullptr, std::move(from)) {}
  inline TextureDataChunk& operator=(const TextureDataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureDataChunk& operator=(TextureDataChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextureDataChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextureDataChunk* internal_default_instance() {
    return reinterpret_cast<const TextureDataChunk*>(
        &_TextureDataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TextureDataChunk& a, TextureDataChunk& b) { a.Swap(&b); }
  inline void Swap(TextureDataChunk* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextureDataChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextureDataChunk* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TextureDataChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextureDataChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TextureDataChunk& from) { TextureDataChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TextureDataChunk* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TextureDataChunk"; }

 protected:
  explicit TextureDataChunk(::google::protobuf::Arena* arena);
  TextureDataChunk(::google::protobuf::Arena* arena, const TextureDataChunk& from);
  TextureDataChunk(::google::protobuf::Arena* arena, TextureDataChunk&& from) noexcept
      : TextureDataChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kDataChunkFieldNumber = 2,
    kChunkNumberFieldNumber = 3,
    kMaxChunkNumberFieldNumber = 4,
    kIsLastChunkFieldNumber = 5,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kChannelFieldNumber = 8,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes dataChunk = 2;
  void clear_datachunk() ;
  const std::string& datachunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_datachunk(Arg_&& arg, Args_... args);
  std::string* mutable_datachunk();
  PROTOBUF_NODISCARD std::string* release_datachunk();
  void set_allocated_datachunk(std::string* value);

  private:
  const std::string& _internal_datachunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datachunk(
      const std::string& value);
  std::string* _internal_mutable_datachunk();

  public:
  // int32 chunkNumber = 3;
  void clear_chunknumber() ;
  ::int32_t chunknumber() const;
  void set_chunknumber(::int32_t value);

  private:
  ::int32_t _internal_chunknumber() const;
  void _internal_set_chunknumber(::int32_t value);

  public:
  // int32 maxChunkNumber = 4;
  void clear_maxchunknumber() ;
  ::int32_t maxchunknumber() const;
  void set_maxchunknumber(::int32_t value);

  private:
  ::int32_t _internal_maxchunknumber() const;
  void _internal_set_maxchunknumber(::int32_t value);

  public:
  // bool isLastChunk = 5;
  void clear_islastchunk() ;
  bool islastchunk() const;
  void set_islastchunk(bool value);

  private:
  bool _internal_islastchunk() const;
  void _internal_set_islastchunk(bool value);

  public:
  // int32 width = 6;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int32 height = 7;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // int32 channel = 8;
  void clear_channel() ;
  ::int32_t channel() const;
  void set_channel(::int32_t value);

  private:
  ::int32_t _internal_channel() const;
  void _internal_set_channel(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TextureDataChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TextureDataChunk& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr datachunk_;
    ::int32_t chunknumber_;
    ::int32_t maxchunknumber_;
    bool islastchunk_;
    ::int32_t width_;
    ::int32_t height_;
    ::int32_t channel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LevelData_2eproto;
};
// -------------------------------------------------------------------

class TextureChunkRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TextureChunkRequest) */ {
 public:
  inline TextureChunkRequest() : TextureChunkRequest(nullptr) {}
  ~TextureChunkRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TextureChunkRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TextureChunkRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TextureChunkRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TextureChunkRequest(const TextureChunkRequest& from) : TextureChunkRequest(nullptr, from) {}
  inline TextureChunkRequest(TextureChunkRequest&& from) noexcept
      : TextureChunkRequest(nullptr, std::move(from)) {}
  inline TextureChunkRequest& operator=(const TextureChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureChunkRequest& operator=(TextureChunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextureChunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextureChunkRequest* internal_default_instance() {
    return reinterpret_cast<const TextureChunkRequest*>(
        &_TextureChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TextureChunkRequest& a, TextureChunkRequest& b) { a.Swap(&b); }
  inline void Swap(TextureChunkRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextureChunkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextureChunkRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TextureChunkRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextureChunkRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TextureChunkRequest& from) { TextureChunkRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TextureChunkRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TextureChunkRequest"; }

 protected:
  explicit TextureChunkRequest(::google::protobuf::Arena* arena);
  TextureChunkRequest(::google::protobuf::Arena* arena, const TextureChunkRequest& from);
  TextureChunkRequest(::google::protobuf::Arena* arena, TextureChunkRequest&& from) noexcept
      : TextureChunkRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kLevelIdFieldNumber = 1,
    kChunkNumberFieldNumber = 3,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 LevelId = 1;
  void clear_levelid() ;
  ::int32_t levelid() const;
  void set_levelid(::int32_t value);

  private:
  ::int32_t _internal_levelid() const;
  void _internal_set_levelid(::int32_t value);

  public:
  // int32 chunkNumber = 3;
  void clear_chunknumber() ;
  ::int32_t chunknumber() const;
  void set_chunknumber(::int32_t value);

  private:
  ::int32_t _internal_chunknumber() const;
  void _internal_set_chunknumber(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TextureChunkRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TextureChunkRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t levelid_;
    ::int32_t chunknumber_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LevelData_2eproto;
};
// -------------------------------------------------------------------

class ObjectData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ObjectData) */ {
 public:
  inline ObjectData() : ObjectData(nullptr) {}
  ~ObjectData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ObjectData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ObjectData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ObjectData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ObjectData(const ObjectData& from) : ObjectData(nullptr, from) {}
  inline ObjectData(ObjectData&& from) noexcept
      : ObjectData(nullptr, std::move(from)) {}
  inline ObjectData& operator=(const ObjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectData& operator=(ObjectData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectData* internal_default_instance() {
    return reinterpret_cast<const ObjectData*>(
        &_ObjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ObjectData& a, ObjectData& b) { a.Swap(&b); }
  inline void Swap(ObjectData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ObjectData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ObjectData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ObjectData& from) { ObjectData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ObjectData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ObjectData"; }

 protected:
  explicit ObjectData(::google::protobuf::Arena* arena);
  ObjectData(::google::protobuf::Arena* arena, const ObjectData& from);
  ObjectData(::google::protobuf::Arena* arena, ObjectData&& from) noexcept
      : ObjectData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kMeshReferenceFieldNumber = 5,
    kTextureReferenceFieldNumber = 6,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string meshReference = 5;
  void clear_meshreference() ;
  const std::string& meshreference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_meshreference(Arg_&& arg, Args_... args);
  std::string* mutable_meshreference();
  PROTOBUF_NODISCARD std::string* release_meshreference();
  void set_allocated_meshreference(std::string* value);

  private:
  const std::string& _internal_meshreference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meshreference(
      const std::string& value);
  std::string* _internal_mutable_meshreference();

  public:
  // string textureReference = 6;
  void clear_texturereference() ;
  const std::string& texturereference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_texturereference(Arg_&& arg, Args_... args);
  std::string* mutable_texturereference();
  PROTOBUF_NODISCARD std::string* release_texturereference();
  void set_allocated_texturereference(std::string* value);

  private:
  const std::string& _internal_texturereference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texturereference(
      const std::string& value);
  std::string* _internal_mutable_texturereference();

  public:
  // @@protoc_insertion_point(class_scope:ObjectData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ObjectData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr meshreference_;
    ::google::protobuf::internal::ArenaStringPtr texturereference_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LevelData_2eproto;
};
// -------------------------------------------------------------------

class MeshDataChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MeshDataChunk) */ {
 public:
  inline MeshDataChunk() : MeshDataChunk(nullptr) {}
  ~MeshDataChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MeshDataChunk* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MeshDataChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MeshDataChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline MeshDataChunk(const MeshDataChunk& from) : MeshDataChunk(nullptr, from) {}
  inline MeshDataChunk(MeshDataChunk&& from) noexcept
      : MeshDataChunk(nullptr, std::move(from)) {}
  inline MeshDataChunk& operator=(const MeshDataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshDataChunk& operator=(MeshDataChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeshDataChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshDataChunk* internal_default_instance() {
    return reinterpret_cast<const MeshDataChunk*>(
        &_MeshDataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MeshDataChunk& a, MeshDataChunk& b) { a.Swap(&b); }
  inline void Swap(MeshDataChunk* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshDataChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeshDataChunk* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MeshDataChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MeshDataChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MeshDataChunk& from) { MeshDataChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MeshDataChunk* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MeshDataChunk"; }

 protected:
  explicit MeshDataChunk(::google::protobuf::Arena* arena);
  MeshDataChunk(::google::protobuf::Arena* arena, const MeshDataChunk& from);
  MeshDataChunk(::google::protobuf::Arena* arena, MeshDataChunk&& from) noexcept
      : MeshDataChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kDataChunkFieldNumber = 2,
    kChunkNumberFieldNumber = 3,
    kMaxChunkNumberFieldNumber = 4,
    kIsLastChunkFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes dataChunk = 2;
  void clear_datachunk() ;
  const std::string& datachunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_datachunk(Arg_&& arg, Args_... args);
  std::string* mutable_datachunk();
  PROTOBUF_NODISCARD std::string* release_datachunk();
  void set_allocated_datachunk(std::string* value);

  private:
  const std::string& _internal_datachunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datachunk(
      const std::string& value);
  std::string* _internal_mutable_datachunk();

  public:
  // int32 chunkNumber = 3;
  void clear_chunknumber() ;
  ::int32_t chunknumber() const;
  void set_chunknumber(::int32_t value);

  private:
  ::int32_t _internal_chunknumber() const;
  void _internal_set_chunknumber(::int32_t value);

  public:
  // int32 maxChunkNumber = 4;
  void clear_maxchunknumber() ;
  ::int32_t maxchunknumber() const;
  void set_maxchunknumber(::int32_t value);

  private:
  ::int32_t _internal_maxchunknumber() const;
  void _internal_set_maxchunknumber(::int32_t value);

  public:
  // bool isLastChunk = 5;
  void clear_islastchunk() ;
  bool islastchunk() const;
  void set_islastchunk(bool value);

  private:
  bool _internal_islastchunk() const;
  void _internal_set_islastchunk(bool value);

  public:
  // @@protoc_insertion_point(class_scope:MeshDataChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      26, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MeshDataChunk& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr datachunk_;
    ::int32_t chunknumber_;
    ::int32_t maxchunknumber_;
    bool islastchunk_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LevelData_2eproto;
};
// -------------------------------------------------------------------

class MeshChunkRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:MeshChunkRequest) */ {
 public:
  inline MeshChunkRequest() : MeshChunkRequest(nullptr) {}
  ~MeshChunkRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MeshChunkRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MeshChunkRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MeshChunkRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MeshChunkRequest(const MeshChunkRequest& from) : MeshChunkRequest(nullptr, from) {}
  inline MeshChunkRequest(MeshChunkRequest&& from) noexcept
      : MeshChunkRequest(nullptr, std::move(from)) {}
  inline MeshChunkRequest& operator=(const MeshChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshChunkRequest& operator=(MeshChunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeshChunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshChunkRequest* internal_default_instance() {
    return reinterpret_cast<const MeshChunkRequest*>(
        &_MeshChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(MeshChunkRequest& a, MeshChunkRequest& b) { a.Swap(&b); }
  inline void Swap(MeshChunkRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshChunkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeshChunkRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MeshChunkRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MeshChunkRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MeshChunkRequest& from) { MeshChunkRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MeshChunkRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "MeshChunkRequest"; }

 protected:
  explicit MeshChunkRequest(::google::protobuf::Arena* arena);
  MeshChunkRequest(::google::protobuf::Arena* arena, const MeshChunkRequest& from);
  MeshChunkRequest(::google::protobuf::Arena* arena, MeshChunkRequest&& from) noexcept
      : MeshChunkRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kLevelIdFieldNumber = 1,
    kChunkNumberFieldNumber = 3,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 LevelId = 1;
  void clear_levelid() ;
  ::int32_t levelid() const;
  void set_levelid(::int32_t value);

  private:
  ::int32_t _internal_levelid() const;
  void _internal_set_levelid(::int32_t value);

  public:
  // int32 chunkNumber = 3;
  void clear_chunknumber() ;
  ::int32_t chunknumber() const;
  void set_chunknumber(::int32_t value);

  private:
  ::int32_t _internal_chunknumber() const;
  void _internal_set_chunknumber(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MeshChunkRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MeshChunkRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t levelid_;
    ::int32_t chunknumber_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LevelData_2eproto;
};
// -------------------------------------------------------------------

class LevelRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LevelRequest) */ {
 public:
  inline LevelRequest() : LevelRequest(nullptr) {}
  ~LevelRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LevelRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LevelRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LevelRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LevelRequest(const LevelRequest& from) : LevelRequest(nullptr, from) {}
  inline LevelRequest(LevelRequest&& from) noexcept
      : LevelRequest(nullptr, std::move(from)) {}
  inline LevelRequest& operator=(const LevelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelRequest& operator=(LevelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LevelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelRequest* internal_default_instance() {
    return reinterpret_cast<const LevelRequest*>(
        &_LevelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LevelRequest& a, LevelRequest& b) { a.Swap(&b); }
  inline void Swap(LevelRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LevelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LevelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LevelRequest& from) { LevelRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LevelRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "LevelRequest"; }

 protected:
  explicit LevelRequest(::google::protobuf::Arena* arena);
  LevelRequest(::google::protobuf::Arena* arena, const LevelRequest& from);
  LevelRequest(::google::protobuf::Arena* arena, LevelRequest&& from) noexcept
      : LevelRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLevelIdFieldNumber = 1,
  };
  // int32 LevelId = 1;
  void clear_levelid() ;
  ::int32_t levelid() const;
  void set_levelid(::int32_t value);

  private:
  ::int32_t _internal_levelid() const;
  void _internal_set_levelid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:LevelRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LevelRequest& from_msg);
    ::int32_t levelid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LevelData_2eproto;
};
// -------------------------------------------------------------------

class LevelData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LevelData) */ {
 public:
  inline LevelData() : LevelData(nullptr) {}
  ~LevelData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LevelData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LevelData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LevelData(
      ::google::protobuf::internal::ConstantInitialized);

  inline LevelData(const LevelData& from) : LevelData(nullptr, from) {}
  inline LevelData(LevelData&& from) noexcept
      : LevelData(nullptr, std::move(from)) {}
  inline LevelData& operator=(const LevelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelData& operator=(LevelData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LevelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelData* internal_default_instance() {
    return reinterpret_cast<const LevelData*>(
        &_LevelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LevelData& a, LevelData& b) { a.Swap(&b); }
  inline void Swap(LevelData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LevelData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LevelData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LevelData& from) { LevelData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LevelData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "LevelData"; }

 protected:
  explicit LevelData(::google::protobuf::Arena* arena);
  LevelData(::google::protobuf::Arena* arena, const LevelData& from);
  LevelData(::google::protobuf::Arena* arena, LevelData&& from) noexcept
      : LevelData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .ObjectData objectList = 1;
  int objectlist_size() const;
  private:
  int _internal_objectlist_size() const;

  public:
  void clear_objectlist() ;
  ::ObjectData* mutable_objectlist(int index);
  ::google::protobuf::RepeatedPtrField<::ObjectData>* mutable_objectlist();

  private:
  const ::google::protobuf::RepeatedPtrField<::ObjectData>& _internal_objectlist() const;
  ::google::protobuf::RepeatedPtrField<::ObjectData>* _internal_mutable_objectlist();
  public:
  const ::ObjectData& objectlist(int index) const;
  ::ObjectData* add_objectlist();
  const ::google::protobuf::RepeatedPtrField<::ObjectData>& objectlist() const;
  // @@protoc_insertion_point(class_scope:LevelData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LevelData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ObjectData > objectlist_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LevelData_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LevelRequest

// int32 LevelId = 1;
inline void LevelRequest::clear_levelid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.levelid_ = 0;
}
inline ::int32_t LevelRequest::levelid() const {
  // @@protoc_insertion_point(field_get:LevelRequest.LevelId)
  return _internal_levelid();
}
inline void LevelRequest::set_levelid(::int32_t value) {
  _internal_set_levelid(value);
  // @@protoc_insertion_point(field_set:LevelRequest.LevelId)
}
inline ::int32_t LevelRequest::_internal_levelid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.levelid_;
}
inline void LevelRequest::_internal_set_levelid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.levelid_ = value;
}

// -------------------------------------------------------------------

// LevelData

// repeated .ObjectData objectList = 1;
inline int LevelData::_internal_objectlist_size() const {
  return _internal_objectlist().size();
}
inline int LevelData::objectlist_size() const {
  return _internal_objectlist_size();
}
inline void LevelData::clear_objectlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.objectlist_.Clear();
}
inline ::ObjectData* LevelData::mutable_objectlist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:LevelData.objectList)
  return _internal_mutable_objectlist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ObjectData>* LevelData::mutable_objectlist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:LevelData.objectList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_objectlist();
}
inline const ::ObjectData& LevelData::objectlist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LevelData.objectList)
  return _internal_objectlist().Get(index);
}
inline ::ObjectData* LevelData::add_objectlist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ObjectData* _add = _internal_mutable_objectlist()->Add();
  // @@protoc_insertion_point(field_add:LevelData.objectList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ObjectData>& LevelData::objectlist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:LevelData.objectList)
  return _internal_objectlist();
}
inline const ::google::protobuf::RepeatedPtrField<::ObjectData>&
LevelData::_internal_objectlist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.objectlist_;
}
inline ::google::protobuf::RepeatedPtrField<::ObjectData>*
LevelData::_internal_mutable_objectlist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.objectlist_;
}

// -------------------------------------------------------------------

// MeshDataChunk

// string name = 1;
inline void MeshDataChunk::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MeshDataChunk::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MeshDataChunk.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MeshDataChunk::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MeshDataChunk.name)
}
inline std::string* MeshDataChunk::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MeshDataChunk.name)
  return _s;
}
inline const std::string& MeshDataChunk::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void MeshDataChunk::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MeshDataChunk::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MeshDataChunk::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MeshDataChunk.name)
  return _impl_.name_.Release();
}
inline void MeshDataChunk::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MeshDataChunk.name)
}

// bytes dataChunk = 2;
inline void MeshDataChunk::clear_datachunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datachunk_.ClearToEmpty();
}
inline const std::string& MeshDataChunk::datachunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MeshDataChunk.dataChunk)
  return _internal_datachunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MeshDataChunk::set_datachunk(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datachunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MeshDataChunk.dataChunk)
}
inline std::string* MeshDataChunk::mutable_datachunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_datachunk();
  // @@protoc_insertion_point(field_mutable:MeshDataChunk.dataChunk)
  return _s;
}
inline const std::string& MeshDataChunk::_internal_datachunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datachunk_.Get();
}
inline void MeshDataChunk::_internal_set_datachunk(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datachunk_.Set(value, GetArena());
}
inline std::string* MeshDataChunk::_internal_mutable_datachunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.datachunk_.Mutable( GetArena());
}
inline std::string* MeshDataChunk::release_datachunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MeshDataChunk.dataChunk)
  return _impl_.datachunk_.Release();
}
inline void MeshDataChunk::set_allocated_datachunk(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datachunk_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.datachunk_.IsDefault()) {
    _impl_.datachunk_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MeshDataChunk.dataChunk)
}

// int32 chunkNumber = 3;
inline void MeshDataChunk::clear_chunknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunknumber_ = 0;
}
inline ::int32_t MeshDataChunk::chunknumber() const {
  // @@protoc_insertion_point(field_get:MeshDataChunk.chunkNumber)
  return _internal_chunknumber();
}
inline void MeshDataChunk::set_chunknumber(::int32_t value) {
  _internal_set_chunknumber(value);
  // @@protoc_insertion_point(field_set:MeshDataChunk.chunkNumber)
}
inline ::int32_t MeshDataChunk::_internal_chunknumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunknumber_;
}
inline void MeshDataChunk::_internal_set_chunknumber(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunknumber_ = value;
}

// int32 maxChunkNumber = 4;
inline void MeshDataChunk::clear_maxchunknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxchunknumber_ = 0;
}
inline ::int32_t MeshDataChunk::maxchunknumber() const {
  // @@protoc_insertion_point(field_get:MeshDataChunk.maxChunkNumber)
  return _internal_maxchunknumber();
}
inline void MeshDataChunk::set_maxchunknumber(::int32_t value) {
  _internal_set_maxchunknumber(value);
  // @@protoc_insertion_point(field_set:MeshDataChunk.maxChunkNumber)
}
inline ::int32_t MeshDataChunk::_internal_maxchunknumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxchunknumber_;
}
inline void MeshDataChunk::_internal_set_maxchunknumber(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxchunknumber_ = value;
}

// bool isLastChunk = 5;
inline void MeshDataChunk::clear_islastchunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.islastchunk_ = false;
}
inline bool MeshDataChunk::islastchunk() const {
  // @@protoc_insertion_point(field_get:MeshDataChunk.isLastChunk)
  return _internal_islastchunk();
}
inline void MeshDataChunk::set_islastchunk(bool value) {
  _internal_set_islastchunk(value);
  // @@protoc_insertion_point(field_set:MeshDataChunk.isLastChunk)
}
inline bool MeshDataChunk::_internal_islastchunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.islastchunk_;
}
inline void MeshDataChunk::_internal_set_islastchunk(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.islastchunk_ = value;
}

// -------------------------------------------------------------------

// TextureDataChunk

// string name = 1;
inline void TextureDataChunk::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TextureDataChunk::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TextureDataChunk.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextureDataChunk::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TextureDataChunk.name)
}
inline std::string* TextureDataChunk::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TextureDataChunk.name)
  return _s;
}
inline const std::string& TextureDataChunk::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void TextureDataChunk::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* TextureDataChunk::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* TextureDataChunk::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TextureDataChunk.name)
  return _impl_.name_.Release();
}
inline void TextureDataChunk::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TextureDataChunk.name)
}

// bytes dataChunk = 2;
inline void TextureDataChunk::clear_datachunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datachunk_.ClearToEmpty();
}
inline const std::string& TextureDataChunk::datachunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TextureDataChunk.dataChunk)
  return _internal_datachunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextureDataChunk::set_datachunk(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datachunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TextureDataChunk.dataChunk)
}
inline std::string* TextureDataChunk::mutable_datachunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_datachunk();
  // @@protoc_insertion_point(field_mutable:TextureDataChunk.dataChunk)
  return _s;
}
inline const std::string& TextureDataChunk::_internal_datachunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datachunk_.Get();
}
inline void TextureDataChunk::_internal_set_datachunk(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datachunk_.Set(value, GetArena());
}
inline std::string* TextureDataChunk::_internal_mutable_datachunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.datachunk_.Mutable( GetArena());
}
inline std::string* TextureDataChunk::release_datachunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TextureDataChunk.dataChunk)
  return _impl_.datachunk_.Release();
}
inline void TextureDataChunk::set_allocated_datachunk(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datachunk_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.datachunk_.IsDefault()) {
    _impl_.datachunk_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TextureDataChunk.dataChunk)
}

// int32 chunkNumber = 3;
inline void TextureDataChunk::clear_chunknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunknumber_ = 0;
}
inline ::int32_t TextureDataChunk::chunknumber() const {
  // @@protoc_insertion_point(field_get:TextureDataChunk.chunkNumber)
  return _internal_chunknumber();
}
inline void TextureDataChunk::set_chunknumber(::int32_t value) {
  _internal_set_chunknumber(value);
  // @@protoc_insertion_point(field_set:TextureDataChunk.chunkNumber)
}
inline ::int32_t TextureDataChunk::_internal_chunknumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunknumber_;
}
inline void TextureDataChunk::_internal_set_chunknumber(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunknumber_ = value;
}

// int32 maxChunkNumber = 4;
inline void TextureDataChunk::clear_maxchunknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxchunknumber_ = 0;
}
inline ::int32_t TextureDataChunk::maxchunknumber() const {
  // @@protoc_insertion_point(field_get:TextureDataChunk.maxChunkNumber)
  return _internal_maxchunknumber();
}
inline void TextureDataChunk::set_maxchunknumber(::int32_t value) {
  _internal_set_maxchunknumber(value);
  // @@protoc_insertion_point(field_set:TextureDataChunk.maxChunkNumber)
}
inline ::int32_t TextureDataChunk::_internal_maxchunknumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxchunknumber_;
}
inline void TextureDataChunk::_internal_set_maxchunknumber(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxchunknumber_ = value;
}

// bool isLastChunk = 5;
inline void TextureDataChunk::clear_islastchunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.islastchunk_ = false;
}
inline bool TextureDataChunk::islastchunk() const {
  // @@protoc_insertion_point(field_get:TextureDataChunk.isLastChunk)
  return _internal_islastchunk();
}
inline void TextureDataChunk::set_islastchunk(bool value) {
  _internal_set_islastchunk(value);
  // @@protoc_insertion_point(field_set:TextureDataChunk.isLastChunk)
}
inline bool TextureDataChunk::_internal_islastchunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.islastchunk_;
}
inline void TextureDataChunk::_internal_set_islastchunk(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.islastchunk_ = value;
}

// int32 width = 6;
inline void TextureDataChunk::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0;
}
inline ::int32_t TextureDataChunk::width() const {
  // @@protoc_insertion_point(field_get:TextureDataChunk.width)
  return _internal_width();
}
inline void TextureDataChunk::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:TextureDataChunk.width)
}
inline ::int32_t TextureDataChunk::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void TextureDataChunk::_internal_set_width(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// int32 height = 7;
inline void TextureDataChunk::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0;
}
inline ::int32_t TextureDataChunk::height() const {
  // @@protoc_insertion_point(field_get:TextureDataChunk.height)
  return _internal_height();
}
inline void TextureDataChunk::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:TextureDataChunk.height)
}
inline ::int32_t TextureDataChunk::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void TextureDataChunk::_internal_set_height(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// int32 channel = 8;
inline void TextureDataChunk::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_ = 0;
}
inline ::int32_t TextureDataChunk::channel() const {
  // @@protoc_insertion_point(field_get:TextureDataChunk.channel)
  return _internal_channel();
}
inline void TextureDataChunk::set_channel(::int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:TextureDataChunk.channel)
}
inline ::int32_t TextureDataChunk::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_;
}
inline void TextureDataChunk::_internal_set_channel(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_ = value;
}

// -------------------------------------------------------------------

// MeshChunkRequest

// int32 LevelId = 1;
inline void MeshChunkRequest::clear_levelid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.levelid_ = 0;
}
inline ::int32_t MeshChunkRequest::levelid() const {
  // @@protoc_insertion_point(field_get:MeshChunkRequest.LevelId)
  return _internal_levelid();
}
inline void MeshChunkRequest::set_levelid(::int32_t value) {
  _internal_set_levelid(value);
  // @@protoc_insertion_point(field_set:MeshChunkRequest.LevelId)
}
inline ::int32_t MeshChunkRequest::_internal_levelid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.levelid_;
}
inline void MeshChunkRequest::_internal_set_levelid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.levelid_ = value;
}

// string name = 2;
inline void MeshChunkRequest::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MeshChunkRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MeshChunkRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MeshChunkRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MeshChunkRequest.name)
}
inline std::string* MeshChunkRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MeshChunkRequest.name)
  return _s;
}
inline const std::string& MeshChunkRequest::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void MeshChunkRequest::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MeshChunkRequest::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MeshChunkRequest::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:MeshChunkRequest.name)
  return _impl_.name_.Release();
}
inline void MeshChunkRequest::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:MeshChunkRequest.name)
}

// int32 chunkNumber = 3;
inline void MeshChunkRequest::clear_chunknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunknumber_ = 0;
}
inline ::int32_t MeshChunkRequest::chunknumber() const {
  // @@protoc_insertion_point(field_get:MeshChunkRequest.chunkNumber)
  return _internal_chunknumber();
}
inline void MeshChunkRequest::set_chunknumber(::int32_t value) {
  _internal_set_chunknumber(value);
  // @@protoc_insertion_point(field_set:MeshChunkRequest.chunkNumber)
}
inline ::int32_t MeshChunkRequest::_internal_chunknumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunknumber_;
}
inline void MeshChunkRequest::_internal_set_chunknumber(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunknumber_ = value;
}

// -------------------------------------------------------------------

// TextureChunkRequest

// int32 LevelId = 1;
inline void TextureChunkRequest::clear_levelid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.levelid_ = 0;
}
inline ::int32_t TextureChunkRequest::levelid() const {
  // @@protoc_insertion_point(field_get:TextureChunkRequest.LevelId)
  return _internal_levelid();
}
inline void TextureChunkRequest::set_levelid(::int32_t value) {
  _internal_set_levelid(value);
  // @@protoc_insertion_point(field_set:TextureChunkRequest.LevelId)
}
inline ::int32_t TextureChunkRequest::_internal_levelid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.levelid_;
}
inline void TextureChunkRequest::_internal_set_levelid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.levelid_ = value;
}

// string name = 2;
inline void TextureChunkRequest::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TextureChunkRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TextureChunkRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextureChunkRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TextureChunkRequest.name)
}
inline std::string* TextureChunkRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TextureChunkRequest.name)
  return _s;
}
inline const std::string& TextureChunkRequest::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void TextureChunkRequest::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* TextureChunkRequest::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* TextureChunkRequest::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TextureChunkRequest.name)
  return _impl_.name_.Release();
}
inline void TextureChunkRequest::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TextureChunkRequest.name)
}

// int32 chunkNumber = 3;
inline void TextureChunkRequest::clear_chunknumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunknumber_ = 0;
}
inline ::int32_t TextureChunkRequest::chunknumber() const {
  // @@protoc_insertion_point(field_get:TextureChunkRequest.chunkNumber)
  return _internal_chunknumber();
}
inline void TextureChunkRequest::set_chunknumber(::int32_t value) {
  _internal_set_chunknumber(value);
  // @@protoc_insertion_point(field_set:TextureChunkRequest.chunkNumber)
}
inline ::int32_t TextureChunkRequest::_internal_chunknumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunknumber_;
}
inline void TextureChunkRequest::_internal_set_chunknumber(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunknumber_ = value;
}

// -------------------------------------------------------------------

// ObjectData

// string name = 1;
inline void ObjectData::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ObjectData::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ObjectData.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectData::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ObjectData.name)
}
inline std::string* ObjectData::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ObjectData.name)
  return _s;
}
inline const std::string& ObjectData::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ObjectData::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ObjectData::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ObjectData::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ObjectData.name)
  return _impl_.name_.Release();
}
inline void ObjectData::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ObjectData.name)
}

// string meshReference = 5;
inline void ObjectData::clear_meshreference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.meshreference_.ClearToEmpty();
}
inline const std::string& ObjectData::meshreference() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ObjectData.meshReference)
  return _internal_meshreference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectData::set_meshreference(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.meshreference_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ObjectData.meshReference)
}
inline std::string* ObjectData::mutable_meshreference() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_meshreference();
  // @@protoc_insertion_point(field_mutable:ObjectData.meshReference)
  return _s;
}
inline const std::string& ObjectData::_internal_meshreference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.meshreference_.Get();
}
inline void ObjectData::_internal_set_meshreference(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.meshreference_.Set(value, GetArena());
}
inline std::string* ObjectData::_internal_mutable_meshreference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.meshreference_.Mutable( GetArena());
}
inline std::string* ObjectData::release_meshreference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ObjectData.meshReference)
  return _impl_.meshreference_.Release();
}
inline void ObjectData::set_allocated_meshreference(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.meshreference_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.meshreference_.IsDefault()) {
    _impl_.meshreference_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ObjectData.meshReference)
}

// string textureReference = 6;
inline void ObjectData::clear_texturereference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texturereference_.ClearToEmpty();
}
inline const std::string& ObjectData::texturereference() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ObjectData.textureReference)
  return _internal_texturereference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ObjectData::set_texturereference(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texturereference_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ObjectData.textureReference)
}
inline std::string* ObjectData::mutable_texturereference() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_texturereference();
  // @@protoc_insertion_point(field_mutable:ObjectData.textureReference)
  return _s;
}
inline const std::string& ObjectData::_internal_texturereference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.texturereference_.Get();
}
inline void ObjectData::_internal_set_texturereference(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texturereference_.Set(value, GetArena());
}
inline std::string* ObjectData::_internal_mutable_texturereference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.texturereference_.Mutable( GetArena());
}
inline std::string* ObjectData::release_texturereference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ObjectData.textureReference)
  return _impl_.texturereference_.Release();
}
inline void ObjectData::set_allocated_texturereference(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texturereference_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.texturereference_.IsDefault()) {
    _impl_.texturereference_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ObjectData.textureReference)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // LevelData_2eproto_2epb_2eh
