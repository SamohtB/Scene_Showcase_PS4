// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: LevelData.proto

#include "LevelData.pb.h"
#include "LevelData.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* SceneDataService_method_names[] = {
  "/SceneDataService/GetLevelData",
  "/SceneDataService/GetMeshData",
  "/SceneDataService/GetTextureData",
  "/SceneDataService/GetMeshDataChunk",
  "/SceneDataService/GetTextureDataChunk",
};

std::unique_ptr< SceneDataService::Stub> SceneDataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SceneDataService::Stub> stub(new SceneDataService::Stub(channel, options));
  return stub;
}

SceneDataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetLevelData_(SceneDataService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMeshData_(SceneDataService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetTextureData_(SceneDataService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetMeshDataChunk_(SceneDataService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTextureDataChunk_(SceneDataService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SceneDataService::Stub::GetLevelData(::grpc::ClientContext* context, const ::LevelRequest& request, ::LevelData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::LevelRequest, ::LevelData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLevelData_, context, request, response);
}

void SceneDataService::Stub::async::GetLevelData(::grpc::ClientContext* context, const ::LevelRequest* request, ::LevelData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::LevelRequest, ::LevelData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLevelData_, context, request, response, std::move(f));
}

void SceneDataService::Stub::async::GetLevelData(::grpc::ClientContext* context, const ::LevelRequest* request, ::LevelData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLevelData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LevelData>* SceneDataService::Stub::PrepareAsyncGetLevelDataRaw(::grpc::ClientContext* context, const ::LevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::LevelData, ::LevelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLevelData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::LevelData>* SceneDataService::Stub::AsyncGetLevelDataRaw(::grpc::ClientContext* context, const ::LevelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLevelDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::MeshTable>* SceneDataService::Stub::GetMeshDataRaw(::grpc::ClientContext* context, const ::MeshRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::MeshTable>::Create(channel_.get(), rpcmethod_GetMeshData_, context, request);
}

void SceneDataService::Stub::async::GetMeshData(::grpc::ClientContext* context, const ::MeshRequest* request, ::grpc::ClientReadReactor< ::MeshTable>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::MeshTable>::Create(stub_->channel_.get(), stub_->rpcmethod_GetMeshData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::MeshTable>* SceneDataService::Stub::AsyncGetMeshDataRaw(::grpc::ClientContext* context, const ::MeshRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MeshTable>::Create(channel_.get(), cq, rpcmethod_GetMeshData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::MeshTable>* SceneDataService::Stub::PrepareAsyncGetMeshDataRaw(::grpc::ClientContext* context, const ::MeshRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MeshTable>::Create(channel_.get(), cq, rpcmethod_GetMeshData_, context, request, false, nullptr);
}

::grpc::ClientReader< ::TextureTable>* SceneDataService::Stub::GetTextureDataRaw(::grpc::ClientContext* context, const ::TextureRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::TextureTable>::Create(channel_.get(), rpcmethod_GetTextureData_, context, request);
}

void SceneDataService::Stub::async::GetTextureData(::grpc::ClientContext* context, const ::TextureRequest* request, ::grpc::ClientReadReactor< ::TextureTable>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::TextureTable>::Create(stub_->channel_.get(), stub_->rpcmethod_GetTextureData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TextureTable>* SceneDataService::Stub::AsyncGetTextureDataRaw(::grpc::ClientContext* context, const ::TextureRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TextureTable>::Create(channel_.get(), cq, rpcmethod_GetTextureData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TextureTable>* SceneDataService::Stub::PrepareAsyncGetTextureDataRaw(::grpc::ClientContext* context, const ::TextureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TextureTable>::Create(channel_.get(), cq, rpcmethod_GetTextureData_, context, request, false, nullptr);
}

::grpc::Status SceneDataService::Stub::GetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::MeshDataChunk* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MeshChunkRequest, ::MeshDataChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMeshDataChunk_, context, request, response);
}

void SceneDataService::Stub::async::GetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest* request, ::MeshDataChunk* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MeshChunkRequest, ::MeshDataChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMeshDataChunk_, context, request, response, std::move(f));
}

void SceneDataService::Stub::async::GetMeshDataChunk(::grpc::ClientContext* context, const ::MeshChunkRequest* request, ::MeshDataChunk* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMeshDataChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MeshDataChunk>* SceneDataService::Stub::PrepareAsyncGetMeshDataChunkRaw(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MeshDataChunk, ::MeshChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMeshDataChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MeshDataChunk>* SceneDataService::Stub::AsyncGetMeshDataChunkRaw(::grpc::ClientContext* context, const ::MeshChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMeshDataChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SceneDataService::Stub::GetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::TextureDataChunk* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TextureChunkRequest, ::TextureDataChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTextureDataChunk_, context, request, response);
}

void SceneDataService::Stub::async::GetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest* request, ::TextureDataChunk* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TextureChunkRequest, ::TextureDataChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTextureDataChunk_, context, request, response, std::move(f));
}

void SceneDataService::Stub::async::GetTextureDataChunk(::grpc::ClientContext* context, const ::TextureChunkRequest* request, ::TextureDataChunk* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTextureDataChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TextureDataChunk>* SceneDataService::Stub::PrepareAsyncGetTextureDataChunkRaw(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TextureDataChunk, ::TextureChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTextureDataChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TextureDataChunk>* SceneDataService::Stub::AsyncGetTextureDataChunkRaw(::grpc::ClientContext* context, const ::TextureChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTextureDataChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

SceneDataService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneDataService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SceneDataService::Service, ::LevelRequest, ::LevelData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SceneDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::LevelRequest* req,
             ::LevelData* resp) {
               return service->GetLevelData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneDataService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SceneDataService::Service, ::MeshRequest, ::MeshTable>(
          [](SceneDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MeshRequest* req,
             ::grpc::ServerWriter<::MeshTable>* writer) {
               return service->GetMeshData(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneDataService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SceneDataService::Service, ::TextureRequest, ::TextureTable>(
          [](SceneDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TextureRequest* req,
             ::grpc::ServerWriter<::TextureTable>* writer) {
               return service->GetTextureData(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneDataService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SceneDataService::Service, ::MeshChunkRequest, ::MeshDataChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SceneDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MeshChunkRequest* req,
             ::MeshDataChunk* resp) {
               return service->GetMeshDataChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneDataService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SceneDataService::Service, ::TextureChunkRequest, ::TextureDataChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SceneDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TextureChunkRequest* req,
             ::TextureDataChunk* resp) {
               return service->GetTextureDataChunk(ctx, req, resp);
             }, this)));
}

SceneDataService::Service::~Service() {
}

::grpc::Status SceneDataService::Service::GetLevelData(::grpc::ServerContext* context, const ::LevelRequest* request, ::LevelData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SceneDataService::Service::GetMeshData(::grpc::ServerContext* context, const ::MeshRequest* request, ::grpc::ServerWriter< ::MeshTable>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SceneDataService::Service::GetTextureData(::grpc::ServerContext* context, const ::TextureRequest* request, ::grpc::ServerWriter< ::TextureTable>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SceneDataService::Service::GetMeshDataChunk(::grpc::ServerContext* context, const ::MeshChunkRequest* request, ::MeshDataChunk* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SceneDataService::Service::GetTextureDataChunk(::grpc::ServerContext* context, const ::TextureChunkRequest* request, ::TextureDataChunk* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


